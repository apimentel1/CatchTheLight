
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca7  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a34  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ea  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 31       	cpi	r26, 0x18	; 24
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  ea:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <FlashPort>:
	{
		_delay_ms(10);
	}*/
	//TCNT1 = Delay;
	OCR1A = Delay;
}
  f2:	9c 01       	movw	r18, r24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	31 09       	sbc	r19, r1
  f8:	29 30       	cpi	r18, 0x09	; 9
  fa:	31 05       	cpc	r19, r1
  fc:	80 f0       	brcs	.+32     	; 0x11e <FlashPort+0x2c>
  fe:	4b b1       	in	r20, 0x0b	; 11
 100:	fc 01       	movw	r30, r24
 102:	ec 5f       	subi	r30, 0xFC	; 252
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	c9 01       	movw	r24, r18
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <FlashPort+0x22>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <FlashPort+0x1e>
 118:	84 2b       	or	r24, r20
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	08 95       	ret
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	84 f4       	brge	.+32     	; 0x144 <FlashPort+0x52>
 124:	48 b1       	in	r20, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	ec 5f       	subi	r30, 0xFC	; 252
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	c9 01       	movw	r24, r18
 132:	00 80       	ld	r0, Z
 134:	02 c0       	rjmp	.+4      	; 0x13a <FlashPort+0x48>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <FlashPort+0x44>
 13e:	84 2b       	or	r24, r20
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
 144:	45 b1       	in	r20, 0x05	; 5
 146:	fc 01       	movw	r30, r24
 148:	ec 5f       	subi	r30, 0xFC	; 252
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	c9 01       	movw	r24, r18
 152:	00 80       	ld	r0, Z
 154:	02 c0       	rjmp	.+4      	; 0x15a <FlashPort+0x68>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <FlashPort+0x64>
 15e:	84 2b       	or	r24, r20
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret

00000164 <Cycle_lights>:
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	1b b8       	out	0x0b, r1	; 11
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	15 b8       	out	0x05, r1	; 5
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	18 b8       	out	0x08, r1	; 8
 170:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 174:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
 17c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 180:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	99 27       	eor	r25, r25
 18a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 18e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 19a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 19e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a2:	08 95       	ret

000001a4 <Cycle_lights_Rev>:
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	1b b8       	out	0x0b, r1	; 11
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	15 b8       	out	0x05, r1	; 5
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	18 b8       	out	0x08, r1	; 8
 1b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 1b4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 1b8:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
 1bc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 1c0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	2a f0       	brmi	.+10     	; 0x1d2 <Cycle_lights_Rev+0x2e>
 1c8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 1cc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <Cycle_lights_Rev+0x3a>
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 1da:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ee:	08 95       	ret

000001f0 <Light_Direction>:
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Direction>
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Direction+0x1>
 1f8:	89 2b       	or	r24, r25
 1fa:	19 f0       	breq	.+6      	; 0x202 <Light_Direction+0x12>
 1fc:	0e 94 b2 00 	call	0x164	; 0x164 <Cycle_lights>
 200:	08 95       	ret
 202:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Cycle_lights_Rev>
 206:	08 95       	ret

00000208 <All_On>:
 208:	ac 01       	movw	r20, r24
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	1c f5       	brge	.+70     	; 0x256 <All_On+0x4e>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	85 b1       	in	r24, 0x05	; 5
 216:	15 b8       	out	0x05, r1	; 5
 218:	9b b1       	in	r25, 0x0b	; 11
 21a:	98 70       	andi	r25, 0x08	; 8
 21c:	9b b9       	out	0x0b, r25	; 11
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	18 b8       	out	0x08, r1	; 8
 222:	87 ea       	ldi	r24, 0xA7	; 167
 224:	91 e6       	ldi	r25, 0x61	; 97
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <All_On+0x1e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <All_On+0x24>
 22c:	00 00       	nop
 22e:	95 b1       	in	r25, 0x05	; 5
 230:	9f 61       	ori	r25, 0x1F	; 31
 232:	95 b9       	out	0x05, r25	; 5
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	9f 6e       	ori	r25, 0xEF	; 239
 238:	9b b9       	out	0x0b, r25	; 11
 23a:	98 b1       	in	r25, 0x08	; 8
 23c:	9c 63       	ori	r25, 0x3C	; 60
 23e:	98 b9       	out	0x08, r25	; 8
 240:	87 ea       	ldi	r24, 0xA7	; 167
 242:	91 e6       	ldi	r25, 0x61	; 97
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <All_On+0x3c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <All_On+0x42>
 24a:	00 00       	nop
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	42 17       	cp	r20, r18
 252:	53 07       	cpc	r21, r19
 254:	f9 f6       	brne	.-66     	; 0x214 <All_On+0xc>
 256:	08 95       	ret

00000258 <main>:
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a b9       	out	0x0a, r24	; 10
 25e:	84 b1       	in	r24, 0x04	; 4
 260:	8f 67       	ori	r24, 0x7F	; 127
 262:	84 b9       	out	0x04, r24	; 4
 264:	8d ef       	ldi	r24, 0xFD	; 253
 266:	87 b9       	out	0x07, r24	; 7
 268:	41 9a       	sbi	0x08, 1	; 8
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	2f 9a       	sbi	0x05, 7	; 5
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 27c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 288:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 28c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 290:	e8 e6       	ldi	r30, 0x68	; 104
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	82 60       	ori	r24, 0x02	; 2
 298:	80 83       	st	Z, r24
 29a:	ec e6       	ldi	r30, 0x6C	; 108
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
 2a4:	78 94       	sei
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 04 01 	call	0x208	; 0x208 <All_On>
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <main+0x56>

000002b0 <__vector_4>:

ISR(PCINT1_vect)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	if( (PINC & (1<<button)) == 0 ) //button goes low
 2d2:	31 99       	sbic	0x06, 1	; 6
 2d4:	5e c0       	rjmp	.+188    	; 0x392 <__vector_4+0xe2>
	{
		if(Flashreg == 0)
 2d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 2da:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 2de:	89 2b       	or	r24, r25
 2e0:	c9 f5       	brne	.+114    	; 0x354 <__vector_4+0xa4>
		{
			All_On(5);
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 04 01 	call	0x208	; 0x208 <All_On>
			Direction ^= 1;
 2ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Direction>
 2ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Direction+0x1>
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	82 27       	eor	r24, r18
 2f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Direction+0x1>
 2fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Direction>
			if(Win_time > 1)
 2fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 302:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 306:	02 97       	sbiw	r24, 0x02	; 2
 308:	dc f0       	brlt	.+54     	; 0x340 <__vector_4+0x90>
			{
				Delay_Time -= 78; //subtract 20ms
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 30e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 312:	8e 54       	subi	r24, 0x4E	; 78
 314:	91 09       	sbc	r25, r1
 316:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
				if(Delay_Time < 1)
 31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 322:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 326:	18 16       	cp	r1, r24
 328:	19 06       	cpc	r1, r25
 32a:	54 f0       	brlt	.+20     	; 0x340 <__vector_4+0x90>
				{
					Delay_Time = 390; //reset to 100ms
 32c:	86 e8       	ldi	r24, 0x86	; 134
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
					Win_time = 0;
 338:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 33c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
				}
			}
			Win_time++;
 340:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 344:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 34e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 352:	1f c0       	rjmp	.+62     	; 0x392 <__vector_4+0xe2>
		}
		else
		{
			PORTD &= 0x0; //turn off all led
 354:	8b b1       	in	r24, 0x0b	; 11
 356:	1b b8       	out	0x0b, r1	; 11
			PORTB &= 0x0;
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	15 b8       	out	0x05, r1	; 5
			PORTC &= 0x0;
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	18 b8       	out	0x08, r1	; 8
			
			FlashPort(Flashreg);
 360:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 364:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 368:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	8f e3       	ldi	r24, 0x3F	; 63
 36e:	9d e0       	ldi	r25, 0x0D	; 13
 370:	23 e0       	ldi	r18, 0x03	; 3
 372:	81 50       	subi	r24, 0x01	; 1
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <__vector_4+0xc2>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <__vector_4+0xcc>
 37c:	00 00       	nop
			
			//mydelay(3906); //delay 1 second
			_delay_ms(1000);	
			Delay_Time = 390; //100 ms
 37e:	86 e8       	ldi	r24, 0x86	; 134
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 386:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
			Win_time = 0;
 38a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 38e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		}
	}
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	Light_Direction();
 3d6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Light_Direction>
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
