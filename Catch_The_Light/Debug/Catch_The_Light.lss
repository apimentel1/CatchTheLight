
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2d  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f2  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ed       	ldi	r30, 0xD0	; 208
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  da:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <Cycle_lights_Rev>:
	_delay_ms(50);
}

void Cycle_lights_Rev()
{
	PORTD &= 0x0; //turn off all led
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x0;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	15 b8       	out	0x05, r1	; 5
	
	if(Currentport)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Currentport>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Currentport+0x1>
  f2:	89 2b       	or	r24, r25
  f4:	69 f0       	breq	.+26     	; 0x110 <Cycle_lights_Rev+0x2e>
	{
		PORTB |= (1<< Flashreg);
  f6:	25 b1       	in	r18, 0x05	; 5
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <Flashreg>
 100:	02 c0       	rjmp	.+4      	; 0x106 <Cycle_lights_Rev+0x24>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <Cycle_lights_Rev+0x20>
 10a:	82 2b       	or	r24, r18
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	0c c0       	rjmp	.+24     	; 0x128 <Cycle_lights_Rev+0x46>
	}
	else
	{
		PORTD |= (1<< Flashreg);
 110:	2b b1       	in	r18, 0x0b	; 11
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <Flashreg>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Cycle_lights_Rev+0x3e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <Cycle_lights_Rev+0x3a>
 124:	82 2b       	or	r24, r18
 126:	8b b9       	out	0x0b, r24	; 11
	}
	
	Flashreg = Flashreg-1; //once Flashreg rolls over to 0, 
 128:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flashreg>
 12c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Flashreg+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Flashreg+0x1>
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Flashreg>
	if (Flashreg == 0) //when Flashreg is 0 again, Next port of leds is to be flashed
 13a:	89 2b       	or	r24, r25
 13c:	81 f4       	brne	.+32     	; 0x15e <Cycle_lights_Rev+0x7c>
	{
		Currentport = Currentport^1; //toggle Currentport between 1 and 0
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Currentport>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Currentport+0x1>
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	82 27       	eor	r24, r18
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Currentport+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Currentport>
		Flashreg = 7;
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Flashreg+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Flashreg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	90 e7       	ldi	r25, 0x70	; 112
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	81 50       	subi	r24, 0x01	; 1
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <Cycle_lights_Rev+0x82>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <Cycle_lights_Rev+0x8c>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <All_On>:
	}
	_delay_ms(50);
}

void All_On ()
{
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTB &= 0x0; //all off but PB7 the target led
		PORTD &= 0x0;
		_delay_ms(100);
		
		PORTB |= 0xFF; //all on
 176:	2f ef       	ldi	r18, 0xFF	; 255
void All_On ()
{
	int Flashtime = 0;
	while (Flashtime < 10)
	{
		PORTB &= 0x0; //all off but PB7 the target led
 178:	35 b1       	in	r19, 0x05	; 5
 17a:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x0;
 17c:	3b b1       	in	r19, 0x0b	; 11
 17e:	1b b8       	out	0x0b, r1	; 11
 180:	3f ef       	ldi	r19, 0xFF	; 255
 182:	41 ee       	ldi	r20, 0xE1	; 225
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	31 50       	subi	r19, 0x01	; 1
 188:	40 40       	sbci	r20, 0x00	; 0
 18a:	50 40       	sbci	r21, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <All_On+0x14>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <All_On+0x1e>
 190:	00 00       	nop
		_delay_ms(100);
		
		PORTB |= 0xFF; //all on
 192:	35 b1       	in	r19, 0x05	; 5
 194:	25 b9       	out	0x05, r18	; 5
		PORTD |= 0xFF;
 196:	3b b1       	in	r19, 0x0b	; 11
 198:	2b b9       	out	0x0b, r18	; 11
 19a:	3f ef       	ldi	r19, 0xFF	; 255
 19c:	41 ee       	ldi	r20, 0xE1	; 225
 19e:	54 e0       	ldi	r21, 0x04	; 4
 1a0:	31 50       	subi	r19, 0x01	; 1
 1a2:	40 40       	sbci	r20, 0x00	; 0
 1a4:	50 40       	sbci	r21, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <All_On+0x2e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <All_On+0x38>
 1aa:	00 00       	nop
 1ac:	01 97       	sbiw	r24, 0x01	; 1
}

void All_On ()
{
	int Flashtime = 0;
	while (Flashtime < 10)
 1ae:	21 f7       	brne	.-56     	; 0x178 <All_On+0x6>
		_delay_ms(100);
		
		Flashtime++;
	}
	
 1b0:	08 95       	ret

000001b2 <main>:
int Flashreg = 7;
int Currentport = 1;

int main(void)
{
	DDRD &= 0xFF;
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xFF;
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	84 b9       	out	0x04, r24	; 4
	
	
	PORTB &= 0;
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	15 b8       	out	0x05, r1	; 5
	PORTD &= 0; //Turn off leds
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	1b b8       	out	0x0b, r1	; 11
	
	All_On();
 1c2:	0e 94 b9 00 	call	0x172	; 0x172 <All_On>
	
    /* Replace with your application code */
    while (1) 
    {
		Cycle_lights_Rev();
 1c6:	0e 94 71 00 	call	0xe2	; 0xe2 <Cycle_lights_Rev>
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <main+0x14>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
