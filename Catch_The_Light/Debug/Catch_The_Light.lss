
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc6  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a40  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000438  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052b  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ea       	ldi	r30, 0xAA	; 170
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 30       	cpi	r26, 0x00	; 0
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  ea:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <mydelay>:
	{
		Flashreg = 15; //reset to 15
	}
	
	
	mydelay(10); //delay 100ms
  f2:	18 16       	cp	r1, r24
  f4:	19 06       	cpc	r1, r25
  f6:	6c f4       	brge	.+26     	; 0x112 <mydelay+0x20>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	ef e3       	ldi	r30, 0x3F	; 63
  fe:	fc e9       	ldi	r31, 0x9C	; 156
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <mydelay+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <mydelay+0x14>
 106:	00 00       	nop
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	82 17       	cp	r24, r18
 10e:	93 07       	cpc	r25, r19
 110:	a9 f7       	brne	.-22     	; 0xfc <mydelay+0xa>
 112:	08 95       	ret

00000114 <All_On>:
	
}

void All_On (int Flashtime)
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	int Count = 0;
	while (Count < Flashtime)
 11c:	18 16       	cp	r1, r24
 11e:	19 06       	cpc	r1, r25
 120:	2c f5       	brge	.+74     	; 0x16c <All_On+0x58>
 122:	ec 01       	movw	r28, r24
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	10 e0       	ldi	r17, 0x00	; 0
	{
		PORTB &= 0x0; 
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x08; //all off but PD3 the target led
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	88 70       	andi	r24, 0x08	; 8
 130:	8b b9       	out	0x0b, r24	; 11
		PORTC &= 0x0;
 132:	88 b1       	in	r24, 0x08	; 8
 134:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <All_On+0x28>
 144:	00 c0       	rjmp	.+0      	; 0x146 <All_On+0x32>
 146:	00 00       	nop
		_delay_ms(100);
		
		PORTB |= 0x1F; //all on
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	9f 61       	ori	r25, 0x1F	; 31
 14c:	95 b9       	out	0x05, r25	; 5
		PORTD |= 0xEF;
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 6e       	ori	r25, 0xEF	; 239
 152:	9b b9       	out	0x0b, r25	; 11
		PORTC |= 0x3C;
 154:	98 b1       	in	r25, 0x08	; 8
 156:	9c 63       	ori	r25, 0x3C	; 60
 158:	98 b9       	out	0x08, r25	; 8
		mydelay(5); //50ms delay
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 79 00 	call	0xf2	; 0xf2 <mydelay>
		
		Count++;
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
}

void All_On (int Flashtime)
{
	int Count = 0;
	while (Count < Flashtime)
 166:	c0 17       	cp	r28, r16
 168:	d1 07       	cpc	r29, r17
 16a:	f1 f6       	brne	.-68     	; 0x128 <All_On+0x14>
		mydelay(5); //50ms delay
		
		Count++;
	}
	
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <main>:
int Flashreg = 0;
int Num = 15;

int main(void)
{
	DDRD &= 0xFF;
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xFF;
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	84 b9       	out	0x04, r24	; 4
	DDRC &= 0xFF;
 17e:	87 b1       	in	r24, 0x07	; 7
 180:	87 b9       	out	0x07, r24	; 7
	
	
	PORTB &= 0x0;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	15 b8       	out	0x05, r1	; 5
	PORTD &= 0x0; //Turn off leds
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	1b b8       	out	0x0b, r1	; 11
	PORTC &= 0x0;
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	18 b8       	out	0x08, r1	; 8
	
	All_On(10);
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 8a 00 	call	0x114	; 0x114 <All_On>
			temp++;
		}
		temp = 0;
		
		All_On(10);*/
		PORTB &= 0x0;
 196:	85 b1       	in	r24, 0x05	; 5
 198:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x0; //Turn off leds
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	1b b8       	out	0x0b, r1	; 11
		PORTC &= 0x0;
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	18 b8       	out	0x08, r1	; 8
		PORTD |= (1<<0);
 1a2:	58 9a       	sbi	0x0b, 0	; 11
 1a4:	f8 cf       	rjmp	.-16     	; 0x196 <main+0x20>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
