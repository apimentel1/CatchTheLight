
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ade  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000980  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000370  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ed       	ldi	r30, 0xD8	; 216
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 30       	cpi	r26, 0x04	; 4
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  ea:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Cycle_lights>:
	//PORTD &= 0x0;
	//PORTD |= (1<< Flashreg);
	//Flashreg = (Flashreg+1) & 7;
	//_delay_ms(100);

	PORTD &= 0x0; //turn off all led
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x0;
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	15 b8       	out	0x05, r1	; 5
	
	if(Currentport)
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Currentport>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Currentport+0x1>
 102:	89 2b       	or	r24, r25
 104:	69 f0       	breq	.+26     	; 0x120 <Cycle_lights+0x2e>
	{
		PORTD |= (1<< Flashreg);
 106:	2b b1       	in	r18, 0x0b	; 11
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 110:	02 c0       	rjmp	.+4      	; 0x116 <Cycle_lights+0x24>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <Cycle_lights+0x20>
 11a:	82 2b       	or	r24, r18
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	0c c0       	rjmp	.+24     	; 0x138 <Cycle_lights+0x46>
	}
	else
	{
		PORTB |= (1<< Flashreg);
 120:	25 b1       	in	r18, 0x05	; 5
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Cycle_lights+0x3e>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <Cycle_lights+0x3a>
 134:	82 2b       	or	r24, r18
 136:	85 b9       	out	0x05, r24	; 5
	}
	
	
	Flashreg = (Flashreg+1) & 7;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 13c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	87 70       	andi	r24, 0x07	; 7
 144:	99 27       	eor	r25, r25
 146:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (Flashreg == 0)
 14e:	89 2b       	or	r24, r25
 150:	51 f4       	brne	.+20     	; 0x166 <Cycle_lights+0x74>
	{
		Currentport = Currentport^1;
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Currentport>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Currentport+0x1>
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	82 27       	eor	r24, r18
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Currentport+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Currentport>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	91 ee       	ldi	r25, 0xE1	; 225
 16a:	24 e0       	ldi	r18, 0x04	; 4
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <Cycle_lights+0x7a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <Cycle_lights+0x84>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <All_On>:
	}	
	_delay_ms(100);
}

void All_On ()
{
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTB &= 0x0;
		PORTD &= 0x0;
		_delay_ms(250);
		
		PORTB |= 0xFF;
 17e:	2f ef       	ldi	r18, 0xFF	; 255
void All_On ()
{
	int Flashtime = 0;
	while (Flashtime < 10)
	{
		PORTB &= 0x0;
 180:	35 b1       	in	r19, 0x05	; 5
 182:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x0;
 184:	3b b1       	in	r19, 0x0b	; 11
 186:	1b b8       	out	0x0b, r1	; 11
 188:	3f ef       	ldi	r19, 0xFF	; 255
 18a:	44 e3       	ldi	r20, 0x34	; 52
 18c:	5c e0       	ldi	r21, 0x0C	; 12
 18e:	31 50       	subi	r19, 0x01	; 1
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	50 40       	sbci	r21, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <All_On+0x14>
 196:	00 c0       	rjmp	.+0      	; 0x198 <All_On+0x1e>
 198:	00 00       	nop
		_delay_ms(250);
		
		PORTB |= 0xFF;
 19a:	35 b1       	in	r19, 0x05	; 5
 19c:	25 b9       	out	0x05, r18	; 5
		PORTD |= 0xFF;
 19e:	3b b1       	in	r19, 0x0b	; 11
 1a0:	2b b9       	out	0x0b, r18	; 11
 1a2:	3f ef       	ldi	r19, 0xFF	; 255
 1a4:	44 e3       	ldi	r20, 0x34	; 52
 1a6:	5c e0       	ldi	r21, 0x0C	; 12
 1a8:	31 50       	subi	r19, 0x01	; 1
 1aa:	40 40       	sbci	r20, 0x00	; 0
 1ac:	50 40       	sbci	r21, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <All_On+0x2e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <All_On+0x38>
 1b2:	00 00       	nop
 1b4:	01 97       	sbiw	r24, 0x01	; 1
}

void All_On ()
{
	int Flashtime = 0;
	while (Flashtime < 10)
 1b6:	21 f7       	brne	.-56     	; 0x180 <All_On+0x6>
		_delay_ms(250);
		
		Flashtime++;
	}
	
 1b8:	08 95       	ret

000001ba <main>:
int Flashreg = 0;
int Currentport = 1;

int main(void)
{
	DDRD &= 0xFF;
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xFF;
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	84 b9       	out	0x04, r24	; 4
	
	
	PORTB &= 0;
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	15 b8       	out	0x05, r1	; 5
	PORTD &= 0; //Turn off leds
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	1b b8       	out	0x0b, r1	; 11
	
	All_On();
 1ca:	0e 94 bd 00 	call	0x17a	; 0x17a <All_On>
	
    /* Replace with your application code */
    while (1) 
    {
		Cycle_lights();
 1ce:	0e 94 79 00 	call	0xf2	; 0xf2 <Cycle_lights>
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <main+0x14>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
