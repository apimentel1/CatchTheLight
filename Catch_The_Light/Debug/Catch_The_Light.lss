
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4d  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000161  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000226b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee eb       	ldi	r30, 0xBE	; 190
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 31       	cpi	r26, 0x12	; 18
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  ea:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Cycle_lights>:
    }
}

void Cycle_lights()
{
	PORTD &= 0x0; //turn off all led
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x0;
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0x0;
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	18 b8       	out	0x08, r1	; 8
	//int Pin = Ledtab[Flashreg];
	if(Flashreg < 4 || Flashreg > 12)
  fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 102:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 106:	9c 01       	movw	r18, r24
 108:	24 50       	subi	r18, 0x04	; 4
 10a:	31 09       	sbc	r19, r1
 10c:	29 30       	cpi	r18, 0x09	; 9
 10e:	31 05       	cpc	r19, r1
 110:	80 f0       	brcs	.+32     	; 0x132 <Cycle_lights+0x40>
	{
		//PORTD = Ledtab[Flashreg];
		PORTD |= (1<< Ledtab[Flashreg]);
 112:	4b b1       	in	r20, 0x0b	; 11
 114:	fc 01       	movw	r30, r24
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	00 80       	ld	r0, Z
 122:	02 c0       	rjmp	.+4      	; 0x128 <Cycle_lights+0x36>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <Cycle_lights+0x32>
 12c:	84 2b       	or	r24, r20
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	22 c0       	rjmp	.+68     	; 0x176 <Cycle_lights+0x84>
	}
	else if(Flashreg < 8)
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	91 05       	cpc	r25, r1
 136:	84 f4       	brge	.+32     	; 0x158 <Cycle_lights+0x66>
	{
		//PORTC = Ledtab[Flashreg];
		PORTC |= (1<< Ledtab[Flashreg]);
 138:	48 b1       	in	r20, 0x08	; 8
 13a:	fc 01       	movw	r30, r24
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	c9 01       	movw	r24, r18
 146:	00 80       	ld	r0, Z
 148:	02 c0       	rjmp	.+4      	; 0x14e <Cycle_lights+0x5c>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <Cycle_lights+0x58>
 152:	84 2b       	or	r24, r20
 154:	88 b9       	out	0x08, r24	; 8
 156:	0f c0       	rjmp	.+30     	; 0x176 <Cycle_lights+0x84>
	}
	else
	{
		//PORTD = Ledtab[Flashreg];
		PORTB |= (1<< Ledtab[Flashreg]);
 158:	45 b1       	in	r20, 0x05	; 5
 15a:	fc 01       	movw	r30, r24
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	c9 01       	movw	r24, r18
 166:	00 80       	ld	r0, Z
 168:	02 c0       	rjmp	.+4      	; 0x16e <Cycle_lights+0x7c>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <Cycle_lights+0x78>
 172:	84 2b       	or	r24, r20
 174:	85 b9       	out	0x05, r24	; 5
	}
	
	Flashreg = (Flashreg +1) & 15;
 176:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	99 27       	eor	r25, r25
 184:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 188:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	80 e7       	ldi	r24, 0x70	; 112
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <Cycle_lights+0xa0>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Cycle_lights+0xaa>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <main>:
int Flashreg = 0;
int Currentport = 1;

int main(void)
{
	DDRD &= 0xFF;
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xFF;
 1a4:	84 b1       	in	r24, 0x04	; 4
 1a6:	84 b9       	out	0x04, r24	; 4
	DDRC &= 0xFF;
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	87 b9       	out	0x07, r24	; 7
	
	
	PORTB &= 0;
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	15 b8       	out	0x05, r1	; 5
	PORTD &= 0; //Turn off leds
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	1b b8       	out	0x0b, r1	; 11
	//All_On();
	
    /* Replace with your application code */
    while (1) 
    {
		Cycle_lights();
 1b4:	0e 94 79 00 	call	0xf2	; 0xf2 <Cycle_lights>
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <main+0x14>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
