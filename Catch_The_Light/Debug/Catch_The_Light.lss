
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000044a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  000004f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf5  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3a  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000584  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000494  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e4       	ldi	r30, 0x4A	; 74
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 31       	cpi	r26, 0x18	; 24
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  ea:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <FlashPort>:
	{
		_delay_ms(10);
	}*/
	//TCNT1 = Delay;
	//OCR1A = Delay;
}
  f2:	9c 01       	movw	r18, r24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	31 09       	sbc	r19, r1
  f8:	29 30       	cpi	r18, 0x09	; 9
  fa:	31 05       	cpc	r19, r1
  fc:	80 f0       	brcs	.+32     	; 0x11e <FlashPort+0x2c>
  fe:	4b b1       	in	r20, 0x0b	; 11
 100:	fc 01       	movw	r30, r24
 102:	ec 5f       	subi	r30, 0xFC	; 252
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	c9 01       	movw	r24, r18
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <FlashPort+0x22>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <FlashPort+0x1e>
 118:	84 2b       	or	r24, r20
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	08 95       	ret
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	84 f4       	brge	.+32     	; 0x144 <FlashPort+0x52>
 124:	48 b1       	in	r20, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	ec 5f       	subi	r30, 0xFC	; 252
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	c9 01       	movw	r24, r18
 132:	00 80       	ld	r0, Z
 134:	02 c0       	rjmp	.+4      	; 0x13a <FlashPort+0x48>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <FlashPort+0x44>
 13e:	84 2b       	or	r24, r20
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
 144:	45 b1       	in	r20, 0x05	; 5
 146:	fc 01       	movw	r30, r24
 148:	ec 5f       	subi	r30, 0xFC	; 252
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	c9 01       	movw	r24, r18
 152:	00 80       	ld	r0, Z
 154:	02 c0       	rjmp	.+4      	; 0x15a <FlashPort+0x68>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <FlashPort+0x64>
 15e:	84 2b       	or	r24, r20
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret

00000164 <Cycle_lights>:
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	1b b8       	out	0x0b, r1	; 11
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	15 b8       	out	0x05, r1	; 5
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	18 b8       	out	0x08, r1	; 8
 170:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 174:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
 17c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 180:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	99 27       	eor	r25, r25
 18a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 18e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 192:	08 95       	ret

00000194 <Cycle_lights_Rev>:
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	1b b8       	out	0x0b, r1	; 11
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	15 b8       	out	0x05, r1	; 5
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	18 b8       	out	0x08, r1	; 8
 1a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 1a4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 1a8:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
 1ac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 1b0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	2a f0       	brmi	.+10     	; 0x1c2 <Cycle_lights_Rev+0x2e>
 1b8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 1bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 1c0:	08 95       	ret
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Flashreg+0x1>
 1ca:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Flashreg>
 1ce:	08 95       	ret

000001d0 <Light_Direction>:
 1d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Direction>
 1d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Direction+0x1>
 1d8:	89 2b       	or	r24, r25
 1da:	19 f0       	breq	.+6      	; 0x1e2 <Light_Direction+0x12>
 1dc:	0e 94 b2 00 	call	0x164	; 0x164 <Cycle_lights>
 1e0:	08 95       	ret
 1e2:	0e 94 ca 00 	call	0x194	; 0x194 <Cycle_lights_Rev>
 1e6:	08 95       	ret

000001e8 <All_On>:
 1e8:	ac 01       	movw	r20, r24
 1ea:	18 16       	cp	r1, r24
 1ec:	19 06       	cpc	r1, r25
 1ee:	1c f5       	brge	.+70     	; 0x236 <All_On+0x4e>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	15 b8       	out	0x05, r1	; 5
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	98 70       	andi	r25, 0x08	; 8
 1fc:	9b b9       	out	0x0b, r25	; 11
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	18 b8       	out	0x08, r1	; 8
 202:	87 ea       	ldi	r24, 0xA7	; 167
 204:	91 e6       	ldi	r25, 0x61	; 97
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <All_On+0x1e>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <All_On+0x24>
 20c:	00 00       	nop
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	9f 61       	ori	r25, 0x1F	; 31
 212:	95 b9       	out	0x05, r25	; 5
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	9f 6e       	ori	r25, 0xEF	; 239
 218:	9b b9       	out	0x0b, r25	; 11
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9c 63       	ori	r25, 0x3C	; 60
 21e:	98 b9       	out	0x08, r25	; 8
 220:	87 ea       	ldi	r24, 0xA7	; 167
 222:	91 e6       	ldi	r25, 0x61	; 97
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <All_On+0x3c>
 228:	00 c0       	rjmp	.+0      	; 0x22a <All_On+0x42>
 22a:	00 00       	nop
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	42 17       	cp	r20, r18
 232:	53 07       	cpc	r21, r19
 234:	f9 f6       	brne	.-66     	; 0x1f4 <All_On+0xc>
 236:	08 95       	ret

00000238 <main>:
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	8a b9       	out	0x0a, r24	; 10
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	8f 67       	ori	r24, 0x7F	; 127
 242:	84 b9       	out	0x04, r24	; 4
 244:	8d ef       	ldi	r24, 0xFD	; 253
 246:	87 b9       	out	0x07, r24	; 7
 248:	41 9a       	sbi	0x08, 1	; 8
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	2f 9a       	sbi	0x05, 7	; 5
 250:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 25a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 266:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 26a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 272:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 27c:	e8 e6       	ldi	r30, 0x68	; 104
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
 286:	ec e6       	ldi	r30, 0x6C	; 108
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	80 83       	st	Z, r24
 290:	78 94       	sei
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <All_On>
 29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x62>

0000029c <Delay_Times>:
}

int Delay_Times(int win_num)
{
	int delay = 0;
	switch(win_num)
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	71 f0       	breq	.+28     	; 0x2be <Delay_Times+0x22>
 2a2:	1c f4       	brge	.+6      	; 0x2aa <Delay_Times+0xe>
 2a4:	99 23       	and	r25, r25
 2a6:	44 f4       	brge	.+16     	; 0x2b8 <Delay_Times+0x1c>
 2a8:	16 c0       	rjmp	.+44     	; 0x2d6 <Delay_Times+0x3a>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	69 f0       	breq	.+26     	; 0x2ca <Delay_Times+0x2e>
 2b0:	4c f0       	brlt	.+18     	; 0x2c4 <Delay_Times+0x28>
 2b2:	05 97       	sbiw	r24, 0x05	; 5
 2b4:	69 f0       	breq	.+26     	; 0x2d0 <Delay_Times+0x34>
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <Delay_Times+0x3a>
	{
		case 0:
		case 1:
			delay = 390;
 2b8:	86 e8       	ldi	r24, 0x86	; 134
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	08 95       	ret
			break;
		case 2:
			delay = 312;
 2be:	88 e3       	ldi	r24, 0x38	; 56
 2c0:	91 e0       	ldi	r25, 0x01	; 1
			break;
 2c2:	08 95       	ret
		case 3:
			delay = 234;
 2c4:	8a ee       	ldi	r24, 0xEA	; 234
 2c6:	90 e0       	ldi	r25, 0x00	; 0
			break;
 2c8:	08 95       	ret
		case 4:
			delay = 156;
 2ca:	8c e9       	ldi	r24, 0x9C	; 156
 2cc:	90 e0       	ldi	r25, 0x00	; 0
			break;
 2ce:	08 95       	ret
		case 5:
			delay = 78;
 2d0:	8e e4       	ldi	r24, 0x4E	; 78
 2d2:	90 e0       	ldi	r25, 0x00	; 0
			break;
 2d4:	08 95       	ret
	sei();
}

int Delay_Times(int win_num)
{
	int delay = 0;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
		case 5:
			delay = 78;
			break;
	}
	return delay;
}
 2da:	08 95       	ret

000002dc <Did_you_catch_the_light>:
	}
}

void Did_you_catch_the_light()
{
	cli();
 2dc:	f8 94       	cli
	if(Flashreg == 0)
 2de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 2e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 2e6:	89 2b       	or	r24, r25
 2e8:	c1 f5       	brne	.+112    	; 0x35a <Did_you_catch_the_light+0x7e>
	{
		All_On(5);
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <All_On>
		Direction ^= 1;
 2f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Direction>
 2f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Direction+0x1>
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	82 27       	eor	r24, r18
 2fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Direction+0x1>
 302:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Direction>
		if(Win_time > 1)
 306:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 30a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	91 05       	cpc	r25, r1
 312:	cc f0       	brlt	.+50     	; 0x346 <Did_you_catch_the_light+0x6a>
		{
			Delay_Time = Delay_Times(Win_time);//-= 78; //subtract 20ms
 314:	0e 94 4e 01 	call	0x29c	; 0x29c <Delay_Times>
 318:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 31c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
			//OCR1A = Delay_Times(Win_time); //Delay_Time;
			if(Delay_Time < 1)
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 324:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 328:	18 16       	cp	r1, r24
 32a:	19 06       	cpc	r1, r25
 32c:	64 f0       	brlt	.+24     	; 0x346 <Did_you_catch_the_light+0x6a>
			{
				Win_time = 0;
 32e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 332:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
				Delay_Time = Delay_Times(Win_time);//390; //reset to 100ms
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 4e 01 	call	0x29c	; 0x29c <Delay_Times>
 33e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 342:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
				//OCR1A = Delay_Times(Win_time);//Delay_Time;
			}
		}
		Win_time++;
 346:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 34a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 354:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 358:	21 c0       	rjmp	.+66     	; 0x39c <Did_you_catch_the_light+0xc0>
	}
	else
	{
		PORTD &= 0x0; //turn off all led
 35a:	8b b1       	in	r24, 0x0b	; 11
 35c:	1b b8       	out	0x0b, r1	; 11
		PORTB &= 0x0;
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	15 b8       	out	0x05, r1	; 5
		PORTC &= 0x0;
 362:	88 b1       	in	r24, 0x08	; 8
 364:	18 b8       	out	0x08, r1	; 8
		
		FlashPort(Flashreg);
 366:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Flashreg>
 36a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Flashreg+0x1>
 36e:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	9d e0       	ldi	r25, 0x0D	; 13
 376:	23 e0       	ldi	r18, 0x03	; 3
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <Did_you_catch_the_light+0x9c>
 380:	00 c0       	rjmp	.+0      	; 0x382 <Did_you_catch_the_light+0xa6>
 382:	00 00       	nop
		
		//mydelay(3906); //delay 1 second
		_delay_ms(1000);
		Win_time = 0;
 384:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 388:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		Delay_Time = Delay_Times(Win_time);//390; //100 ms
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 4e 01 	call	0x29c	; 0x29c <Delay_Times>
 394:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Time+0x1>
 398:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Time>
		
		//OCR1A = Delay_Times(Win_time);
	}
	sei();
 39c:	78 94       	sei
 39e:	08 95       	ret

000003a0 <__vector_4>:
	//TCNT1 = Delay;
	//OCR1A = Delay;
}

ISR(PCINT1_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	if( (PINC & (1<<button)) == 0 ) //button goes low
 3c2:	31 9b       	sbis	0x06, 1	; 6
	{
		Did_you_catch_the_light();
 3c4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Did_you_catch_the_light>
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_11>:
	}
	return delay;
}

ISR(TIMER1_COMPA_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	TIFR1 = (1<<OCF1A);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	86 bb       	out	0x16, r24	; 22
	OCR1A = Delay_Time;
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Time>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Time+0x1>
 418:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	Light_Direction();
 420:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Light_Direction>
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
