
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000468  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080011c  0080011c  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d50  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a34  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000584  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000381  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e6       	ldi	r30, 0x68	; 104
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 31       	cpi	r26, 0x1C	; 28
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e1       	ldi	r26, 0x1C	; 28
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 32       	cpi	r26, 0x26	; 38
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  ea:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <FlashPort>:
void FlashPort(int Led)
{
	//Flashreg is the index into array Ledtab
	//Ex Led # |1|2|3|...|15|16|
	//Ledtab # |0|1|2|...|14|15|
	if(Led < 4 || Led > 12)
  f2:	9c 01       	movw	r18, r24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	31 09       	sbc	r19, r1
  f8:	29 30       	cpi	r18, 0x09	; 9
  fa:	31 05       	cpc	r19, r1
  fc:	80 f0       	brcs	.+32     	; 0x11e <FlashPort+0x2c>
	{
		PORTD |= (1<< Ledtab[Led]);
  fe:	4b b1       	in	r20, 0x0b	; 11
 100:	fc 01       	movw	r30, r24
 102:	e4 5f       	subi	r30, 0xF4	; 244
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	c9 01       	movw	r24, r18
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <FlashPort+0x22>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <FlashPort+0x1e>
 118:	84 2b       	or	r24, r20
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	08 95       	ret
	}
	else if(Led < 8)
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	84 f4       	brge	.+32     	; 0x144 <FlashPort+0x52>
	{
		PORTC |= (1<< Ledtab[Led]);
 124:	48 b1       	in	r20, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	e4 5f       	subi	r30, 0xF4	; 244
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	c9 01       	movw	r24, r18
 132:	00 80       	ld	r0, Z
 134:	02 c0       	rjmp	.+4      	; 0x13a <FlashPort+0x48>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <FlashPort+0x44>
 13e:	84 2b       	or	r24, r20
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
	}
	else
	{
		PORTB |= (1<< Ledtab[Led]);
 144:	45 b1       	in	r20, 0x05	; 5
 146:	fc 01       	movw	r30, r24
 148:	e4 5f       	subi	r30, 0xF4	; 244
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	c9 01       	movw	r24, r18
 152:	00 80       	ld	r0, Z
 154:	02 c0       	rjmp	.+4      	; 0x15a <FlashPort+0x68>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <FlashPort+0x64>
 15e:	84 2b       	or	r24, r20
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret

00000164 <All_On>:
	
	mydelay(Delay); //delay 100ms
}

void All_On (int Flashtime)
{ 
 164:	ac 01       	movw	r20, r24
	int Count = 0;
	while (Count < Flashtime)
 166:	18 16       	cp	r1, r24
 168:	19 06       	cpc	r1, r25
 16a:	1c f5       	brge	.+70     	; 0x1b2 <All_On+0x4e>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB &= 0x0; 
 170:	85 b1       	in	r24, 0x05	; 5
 172:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x08; //all off but PD3 the target led
 174:	9b b1       	in	r25, 0x0b	; 11
 176:	98 70       	andi	r25, 0x08	; 8
 178:	9b b9       	out	0x0b, r25	; 11
		PORTC &= 0x0;
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	87 ea       	ldi	r24, 0xA7	; 167
 180:	91 e6       	ldi	r25, 0x61	; 97
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <All_On+0x1e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <All_On+0x24>
 188:	00 00       	nop
		_delay_ms(100);
		
		PORTB |= 0x1F; //all on
 18a:	95 b1       	in	r25, 0x05	; 5
 18c:	9f 61       	ori	r25, 0x1F	; 31
 18e:	95 b9       	out	0x05, r25	; 5
		PORTD |= 0xEF;
 190:	9b b1       	in	r25, 0x0b	; 11
 192:	9f 6e       	ori	r25, 0xEF	; 239
 194:	9b b9       	out	0x0b, r25	; 11
		PORTC |= 0x3C;
 196:	98 b1       	in	r25, 0x08	; 8
 198:	9c 63       	ori	r25, 0x3C	; 60
 19a:	98 b9       	out	0x08, r25	; 8
 19c:	87 ea       	ldi	r24, 0xA7	; 167
 19e:	91 e6       	ldi	r25, 0x61	; 97
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <All_On+0x3c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <All_On+0x42>
 1a6:	00 00       	nop
		_delay_ms(100);
		
		Count++;
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
}

void All_On (int Flashtime)
{ 
	int Count = 0;
	while (Count < Flashtime)
 1ac:	42 17       	cp	r20, r18
 1ae:	53 07       	cpc	r21, r19
 1b0:	f9 f6       	brne	.-66     	; 0x170 <All_On+0xc>
 1b2:	08 95       	ret

000001b4 <mydelay>:
		Count++;
	}
}

void mydelay(volatile int Delay)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <mydelay+0x6>
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
	for(int i = 0; i < Delay; i++)
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	18 16       	cp	r1, r24
 1c8:	19 06       	cpc	r1, r25
 1ca:	74 f4       	brge	.+28     	; 0x1e8 <mydelay+0x34>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e3 ec       	ldi	r30, 0xC3	; 195
 1d2:	f9 e0       	ldi	r31, 0x09	; 9
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <mydelay+0x20>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <mydelay+0x26>
 1da:	00 00       	nop
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	29 81       	ldd	r18, Y+1	; 0x01
 1e0:	3a 81       	ldd	r19, Y+2	; 0x02
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	a4 f3       	brlt	.-24     	; 0x1d0 <mydelay+0x1c>
	{
		_delay_ms(10);
	}
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <Cycle_lights>:
	}
}

void Cycle_lights()
{
	PORTD &= 0x0; //turn off all led
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x0;
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0x0;
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	18 b8       	out	0x08, r1	; 8
	
	FlashPort(Flashreg); //Flash the light
 1fe:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 202:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 206:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
	
	Flashreg = (Flashreg + 1) & 15; //Increment Flashreg until 15 then reset to 0
 20a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 20e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	99 27       	eor	r25, r25
 218:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Flashreg+0x1>
 21c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Flashreg>
	if(Flashreg == 0)
 220:	89 2b       	or	r24, r25
 222:	29 f4       	brne	.+10     	; 0x22e <Cycle_lights+0x3c>
		Cycle_count++;
 224:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	mydelay(Delay); //delay 50ms
 22e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Delay>
 232:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Delay+0x1>
 236:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mydelay>
 23a:	08 95       	ret

0000023c <Cycle_lights_Rev>:
	
}

void Cycle_lights_Rev()
{
	PORTD &= 0x0; //turn off all led
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x0;
 240:	85 b1       	in	r24, 0x05	; 5
 242:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0x0;
 244:	88 b1       	in	r24, 0x08	; 8
 246:	18 b8       	out	0x08, r1	; 8
	
	FlashPort(Flashreg); //Flash the led
 248:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 24c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 250:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
	
	Flashreg--; //Decrement Flashreg
 254:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 258:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 25c:	01 97       	sbiw	r24, 0x01	; 1
	
	if (Flashreg < 0) //when below 0
 25e:	2a f0       	brmi	.+10     	; 0x26a <Cycle_lights_Rev+0x2e>
	PORTB &= 0x0;
	PORTC &= 0x0;
	
	FlashPort(Flashreg); //Flash the led
	
	Flashreg--; //Decrement Flashreg
 260:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Flashreg+0x1>
 264:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Flashreg>
 268:	0b c0       	rjmp	.+22     	; 0x280 <Cycle_lights_Rev+0x44>
	
	if (Flashreg < 0) //when below 0
	{
		Flashreg = 15; //reset to 15
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Flashreg+0x1>
 272:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Flashreg>
		Cycle_count++;
 276:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	}
	
	
	mydelay(Delay); //delay 100ms
 280:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Delay>
 284:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Delay+0x1>
 288:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mydelay>
 28c:	08 95       	ret

0000028e <Light_Direction>:



void Light_Direction()
{
	if (Direction)
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Direction>
 292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Direction+0x1>
 296:	89 2b       	or	r24, r25
 298:	19 f0       	breq	.+6      	; 0x2a0 <Light_Direction+0x12>
	{
		Cycle_lights();
 29a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Cycle_lights>
 29e:	08 95       	ret
	} 
	else
	{
		Cycle_lights_Rev();
 2a0:	0e 94 1e 01 	call	0x23c	; 0x23c <Cycle_lights_Rev>
 2a4:	08 95       	ret

000002a6 <Did_you_catch_the_light>:
		Cycle_count = 0;
	}
}

void Did_you_catch_the_light(int LED)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
	if(LED == 0)
 2ac:	89 2b       	or	r24, r25
 2ae:	e9 f5       	brne	.+122    	; 0x32a <Did_you_catch_the_light+0x84>
	{
		All_On(5);
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 b2 00 	call	0x164	; 0x164 <All_On>
		Direction ^= 1;
 2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Direction>
 2bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Direction+0x1>
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	82 27       	eor	r24, r18
 2c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Direction+0x1>
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Direction>
		if(Win_time > 2)
 2cc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Win_time>
 2d0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Win_time+0x1>
 2d4:	03 97       	sbiw	r24, 0x03	; 3
 2d6:	fc f0       	brlt	.+62     	; 0x316 <Did_you_catch_the_light+0x70>
		{
			Delayreg++;
 2d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Delayreg>
 2dc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Delayreg+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Delayreg+0x1>
 2e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Delayreg>
			if(Delayreg > MaxDelay)
 2ea:	05 97       	sbiw	r24, 0x05	; 5
 2ec:	44 f0       	brlt	.+16     	; 0x2fe <Did_you_catch_the_light+0x58>
			{
				Win_time = 0;
 2ee:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Win_time+0x1>
 2f2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <Win_time>
				Delayreg = 0;
 2f6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Delayreg+0x1>
 2fa:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Delayreg>
			}
			Delay = Delay_Times[Delayreg];
 2fe:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <Delayreg>
 302:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <Delayreg+0x1>
 306:	e9 5f       	subi	r30, 0xF9	; 249
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 81       	ld	r24, Z
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Delay+0x1>
 312:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Delay>
		}
		Win_time++;
 316:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Win_time>
 31a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Win_time+0x1>
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Win_time+0x1>
 324:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Win_time>
 328:	21 c0       	rjmp	.+66     	; 0x36c <Did_you_catch_the_light+0xc6>
	}
	else
	{
		PORTD &= 0x0; //turn off all led
 32a:	8b b1       	in	r24, 0x0b	; 11
 32c:	1b b8       	out	0x0b, r1	; 11
		PORTB &= 0x0;
 32e:	85 b1       	in	r24, 0x05	; 5
 330:	15 b8       	out	0x05, r1	; 5
		PORTC &= 0x0;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	18 b8       	out	0x08, r1	; 8
		FlashPort(Flashreg);
 336:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 33a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 33e:	0e 94 79 00 	call	0xf2	; 0xf2 <FlashPort>
		
		mydelay(50); //delay 1 second
 342:	82 e3       	ldi	r24, 0x32	; 50
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mydelay>
		Delayreg = 0;
 34a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Delayreg+0x1>
 34e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Delayreg>
		Delay = Delay_Times[Delayreg];
 352:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Delay_Times>
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Delay+0x1>
 35c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Delay>
		Win_time = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Win_time+0x1>
 368:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Win_time>
	}
	Flashreg = LED;
 36c:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <Flashreg+0x1>
 370:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <Flashreg>
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <__vector_4>:
		_delay_ms(10);
	}
}

ISR(PCINT1_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	if( (PINC & (1<<button)) == 0 ) //button goes low
 39c:	31 99       	sbic	0x06, 1	; 6
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <__vector_4+0x3a>
	{
		Did_you_catch_the_light(Flashreg);
 3a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Flashreg>
 3a4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Flashreg+0x1>
 3a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Did_you_catch_the_light>
		Sleep  = 0;
 3ac:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Sleep>
		Cycle_count = 0;
 3b0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <Enter_sleep>:
}


void Enter_sleep()
{
	Sleep = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Sleep>
	PORTD &= 0x00; //turn off all led
 3dc:	8b b1       	in	r24, 0x0b	; 11
 3de:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0x00;
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0x00;
 3e4:	88 b1       	in	r24, 0x08	; 8
 3e6:	18 b8       	out	0x08, r1	; 8
	Cycle_count = 0;
 3e8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 3ec:	08 95       	ret

000003ee <main>:
uint8_t Sleep = 0;
uint8_t Cycle_count = 0;

int main(void)
{
	DDRD |= 0xFF;
 3ee:	8a b1       	in	r24, 0x0a	; 10
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x7F;
 3f4:	84 b1       	in	r24, 0x04	; 4
 3f6:	8f 67       	ori	r24, 0x7F	; 127
 3f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF & ~(1<<button) ;
 3fa:	8d ef       	ldi	r24, 0xFD	; 253
 3fc:	87 b9       	out	0x07, r24	; 7
	
	
	PORTC |= (1<<button); //enable pull-up resistor for PB7
 3fe:	41 9a       	sbi	0x08, 1	; 8
	
	PORTD |= 0x0; //Turn off leds
 400:	8b b1       	in	r24, 0x0b	; 11
 402:	8b b9       	out	0x0b, r24	; 11
	PORTB |= ~(0x7F);
 404:	2f 9a       	sbi	0x05, 7	; 5

	//Timer_setup();
	Delay = Delay_Times[Delayreg];
 406:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <Delayreg>
 40a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <Delayreg+0x1>
 40e:	e9 5f       	subi	r30, 0xF9	; 249
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	80 81       	ld	r24, Z
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Delay+0x1>
 41a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Delay>
	
	PCICR |= (1 << PCIE1);
 41e:	e8 e6       	ldi	r30, 0x68	; 104
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	82 60       	ori	r24, 0x02	; 2
 426:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9);
 428:	ec e6       	ldi	r30, 0x6C	; 108
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
	All_On(5);
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 b2 00 	call	0x164	; 0x164 <All_On>
	sei();
 43a:	78 94       	sei

    while (1) 
    {
		if(!Sleep)
 43c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Sleep>
 440:	81 11       	cpse	r24, r1
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			Light_Direction();	
 444:	0e 94 47 01 	call	0x28e	; 0x28e <Light_Direction>
		}
		if (Cycle_count >= Cyclestosleep[Delayreg])
 448:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <Delayreg>
 44c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <Delayreg+0x1>
 450:	ee 5f       	subi	r30, 0xFE	; 254
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	90 81       	ld	r25, Z
 456:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 45a:	89 17       	cp	r24, r25
 45c:	78 f3       	brcs	.-34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			Enter_sleep();
 45e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Enter_sleep>
 462:	ec cf       	rjmp	.-40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
