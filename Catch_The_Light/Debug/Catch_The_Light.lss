
Catch_The_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800116  00800116  0000060c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0d  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3c  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d2  00000000  00000000  00002b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_33>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e6       	ldi	r30, 0x62	; 98
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 31       	cpi	r26, 0x16	; 22
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e1       	ldi	r26, 0x16	; 22
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 31       	cpi	r26, 0x1E	; 30
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 14 02 	call	0x428	; 0x428 <main>
  ea:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Timer_setup>:
	{
		_delay_ms(10);
	}*/
	//TCNT1 = Delay;
	//OCR1A = Delay;
}
  f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  fc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Delay_Time>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Delay_Time+0x1>
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 110:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 114:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 11e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 128:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 12c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 130:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 134:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 138:	08 95       	ret

0000013a <FlashPort>:
 13a:	9c 01       	movw	r18, r24
 13c:	24 50       	subi	r18, 0x04	; 4
 13e:	31 09       	sbc	r19, r1
 140:	29 30       	cpi	r18, 0x09	; 9
 142:	31 05       	cpc	r19, r1
 144:	80 f0       	brcs	.+32     	; 0x166 <FlashPort+0x2c>
 146:	4b b1       	in	r20, 0x0b	; 11
 148:	fc 01       	movw	r30, r24
 14a:	ea 5f       	subi	r30, 0xFA	; 250
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	c9 01       	movw	r24, r18
 154:	00 80       	ld	r0, Z
 156:	02 c0       	rjmp	.+4      	; 0x15c <FlashPort+0x22>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <FlashPort+0x1e>
 160:	84 2b       	or	r24, r20
 162:	8b b9       	out	0x0b, r24	; 11
 164:	08 95       	ret
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	91 05       	cpc	r25, r1
 16a:	84 f4       	brge	.+32     	; 0x18c <FlashPort+0x52>
 16c:	48 b1       	in	r20, 0x08	; 8
 16e:	fc 01       	movw	r30, r24
 170:	ea 5f       	subi	r30, 0xFA	; 250
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	c9 01       	movw	r24, r18
 17a:	00 80       	ld	r0, Z
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FlashPort+0x48>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FlashPort+0x44>
 186:	84 2b       	or	r24, r20
 188:	88 b9       	out	0x08, r24	; 8
 18a:	08 95       	ret
 18c:	45 b1       	in	r20, 0x05	; 5
 18e:	fc 01       	movw	r30, r24
 190:	ea 5f       	subi	r30, 0xFA	; 250
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	c9 01       	movw	r24, r18
 19a:	00 80       	ld	r0, Z
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <FlashPort+0x68>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <FlashPort+0x64>
 1a6:	84 2b       	or	r24, r20
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret

000001ac <Cycle_lights>:
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	1b b8       	out	0x0b, r1	; 11
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	15 b8       	out	0x05, r1	; 5
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	18 b8       	out	0x08, r1	; 8
 1b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 1bc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 1c0:	0e 94 9d 00 	call	0x13a	; 0x13a <FlashPort>
 1c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 1c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	99 27       	eor	r25, r25
 1d2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Flashreg+0x1>
 1d6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Flashreg>
 1da:	08 95       	ret

000001dc <Cycle_lights_Rev>:
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	1b b8       	out	0x0b, r1	; 11
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	15 b8       	out	0x05, r1	; 5
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	18 b8       	out	0x08, r1	; 8
 1e8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 1ec:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 1f0:	0e 94 9d 00 	call	0x13a	; 0x13a <FlashPort>
 1f4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 1f8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	2a f0       	brmi	.+10     	; 0x20a <Cycle_lights_Rev+0x2e>
 200:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Flashreg+0x1>
 204:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Flashreg>
 208:	08 95       	ret
 20a:	8f e0       	ldi	r24, 0x0F	; 15
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Flashreg+0x1>
 212:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Flashreg>
 216:	08 95       	ret

00000218 <Light_Direction>:
 218:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Direction>
 21c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Direction+0x1>
 220:	89 2b       	or	r24, r25
 222:	19 f0       	breq	.+6      	; 0x22a <Light_Direction+0x12>
 224:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Cycle_lights>
 228:	08 95       	ret
 22a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Cycle_lights_Rev>
 22e:	08 95       	ret

00000230 <Delay_Times>:
}

int Delay_Times(int win_num)
{
	int delay = 0;
	switch(win_num)
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	91 05       	cpc	r25, r1
 234:	71 f0       	breq	.+28     	; 0x252 <Delay_Times+0x22>
 236:	1c f4       	brge	.+6      	; 0x23e <Delay_Times+0xe>
 238:	99 23       	and	r25, r25
 23a:	44 f4       	brge	.+16     	; 0x24c <Delay_Times+0x1c>
 23c:	16 c0       	rjmp	.+44     	; 0x26a <Delay_Times+0x3a>
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	91 05       	cpc	r25, r1
 242:	69 f0       	breq	.+26     	; 0x25e <Delay_Times+0x2e>
 244:	4c f0       	brlt	.+18     	; 0x258 <Delay_Times+0x28>
 246:	05 97       	sbiw	r24, 0x05	; 5
 248:	69 f0       	breq	.+26     	; 0x264 <Delay_Times+0x34>
 24a:	0f c0       	rjmp	.+30     	; 0x26a <Delay_Times+0x3a>
	{
		case 0:
		case 1:
			delay = 390;
 24c:	86 e8       	ldi	r24, 0x86	; 134
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	08 95       	ret
			break;
		case 2:
			delay = 312;
 252:	88 e3       	ldi	r24, 0x38	; 56
 254:	91 e0       	ldi	r25, 0x01	; 1
			break;
 256:	08 95       	ret
		case 3:
			delay = 234;
 258:	8a ee       	ldi	r24, 0xEA	; 234
 25a:	90 e0       	ldi	r25, 0x00	; 0
			break;
 25c:	08 95       	ret
		case 4:
			delay = 156;
 25e:	8c e9       	ldi	r24, 0x9C	; 156
 260:	90 e0       	ldi	r25, 0x00	; 0
			break;
 262:	08 95       	ret
		case 5:
			delay = 78;
 264:	8e e4       	ldi	r24, 0x4E	; 78
 266:	90 e0       	ldi	r25, 0x00	; 0
			break;
 268:	08 95       	ret
	PORTE &= ~(1<<test_led);
}

int Delay_Times(int win_num)
{
	int delay = 0;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
		case 5:
			delay = 78;
			break;
	}
	return delay;
}
 26e:	08 95       	ret

00000270 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	//PORTE |= (1<<test_led);
	TIFR1 = (1<<OCF1A);
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	86 bb       	out	0x16, r24	; 22
	OCR1A = 0;
 296:	e8 e8       	ldi	r30, 0x88	; 136
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	11 82       	std	Z+1, r1	; 0x01
 29c:	10 82       	st	Z, r1
	OCR1A = Delay_Time;
 29e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Delay_Time>
 2a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Delay_Time+0x1>
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24
	Light_Direction();
 2aa:	0e 94 0c 01 	call	0x218	; 0x218 <Light_Direction>
	//PORTE &= ~(1<<test_led);
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_33>:

ISR(TIMER3_COMPA_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	if(Flashall)
 2f2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Flashall>
 2f6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Flashall+0x1>
 2fa:	89 2b       	or	r24, r25
 2fc:	59 f1       	breq	.+86     	; 0x354 <__vector_33+0x84>
	{
		if(OFF)
 2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OFF>
 302:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <OFF+0x1>
 306:	89 2b       	or	r24, r25
 308:	41 f0       	breq	.+16     	; 0x31a <__vector_33+0x4a>
		{
			PORTB &= 0x0;
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	15 b8       	out	0x05, r1	; 5
			PORTD &= 0x08; //all off but PD3 the target led
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	88 70       	andi	r24, 0x08	; 8
 312:	8b b9       	out	0x0b, r24	; 11
			PORTC &= 0x0;
 314:	88 b1       	in	r24, 0x08	; 8
 316:	18 b8       	out	0x08, r1	; 8
 318:	12 c0       	rjmp	.+36     	; 0x33e <__vector_33+0x6e>
		}
		else
		{
			PORTB |= 0x1F; //all on
 31a:	85 b1       	in	r24, 0x05	; 5
 31c:	8f 61       	ori	r24, 0x1F	; 31
 31e:	85 b9       	out	0x05, r24	; 5
			PORTD |= 0xEF;
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8f 6e       	ori	r24, 0xEF	; 239
 324:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0x3C;
 326:	88 b1       	in	r24, 0x08	; 8
 328:	8c 63       	ori	r24, 0x3C	; 60
 32a:	88 b9       	out	0x08, r24	; 8
			Cycles++;
 32c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Cycles>
 330:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Cycles+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Cycles+0x1>
 33a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Cycles>
		}
		OFF ^= 1;
 33e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OFF>
 342:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <OFF+0x1>
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	82 27       	eor	r24, r18
 34a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <OFF+0x1>
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OFF>
 352:	0f c0       	rjmp	.+30     	; 0x372 <__vector_33+0xa2>
	}
	else
	{
		FlashPort(Flashreg);
 354:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 358:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 35c:	0e 94 9d 00 	call	0x13a	; 0x13a <FlashPort>
		Cycles++;
 360:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Cycles>
 364:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Cycles+0x1>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Cycles+0x1>
 36e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Cycles>
	}
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <Set_Time_3>:

void Set_Time_3(int Delay, int Enable, int Flash)
{
	Flashall = Flash;
 394:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <Flashall+0x1>
 398:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <Flashall>
	if(Enable)
 39c:	67 2b       	or	r22, r23
 39e:	a1 f0       	breq	.+40     	; 0x3c8 <Set_Time_3+0x34>
	{
		TIMSK1 &= ~(1<<OCIE1A);
 3a0:	ef e6       	ldi	r30, 0x6F	; 111
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	20 81       	ld	r18, Z
 3a6:	2d 7f       	andi	r18, 0xFD	; 253
 3a8:	20 83       	st	Z, r18
		//FlashTime = 0;
		TCCR3B |=(1<<CS12)|(0<<CS11)|(0<<CS10);
 3aa:	e1 e9       	ldi	r30, 0x91	; 145
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	20 81       	ld	r18, Z
 3b0:	24 60       	ori	r18, 0x04	; 4
 3b2:	20 83       	st	Z, r18
		TIMSK3 |= (1<<OCIE3A);
 3b4:	e1 e7       	ldi	r30, 0x71	; 113
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	20 81       	ld	r18, Z
 3ba:	22 60       	ori	r18, 0x02	; 2
 3bc:	20 83       	st	Z, r18
		OCR3A = Delay;
 3be:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3c2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 3c6:	08 95       	ret
	}
	else
	{
		OCR3A = Delay;
 3c8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3cc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		TIMSK3 &= ~(1<<OCIE3A);
 3d0:	e1 e7       	ldi	r30, 0x71	; 113
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	8d 7f       	andi	r24, 0xFD	; 253
 3d8:	80 83       	st	Z, r24
		TCCR3B &= (0<<CS12)|(0<<CS11)|(0<<CS10);
 3da:	e1 e9       	ldi	r30, 0x91	; 145
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	10 82       	st	Z, r1
		TIMSK1 |= (1<<OCIE1A);
 3e2:	ef e6       	ldi	r30, 0x6F	; 111
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	80 83       	st	Z, r24
 3ec:	08 95       	ret

000003ee <All_On>:
	
	//mydelay(Delay_Time); //delay 100ms
}

void All_On (int Flashtime)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
	//TIMSK1 &= ~(1<<OCIE1A);
	Set_Time_3(390,1,1);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	86 e8       	ldi	r24, 0x86	; 134
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 ca 01 	call	0x394	; 0x394 <Set_Time_3>
	//TCCR3B |=(1<<CS12)|(0<<CS11)|(0<<CS10);
	//TIMSK3 |= (1<<OCIE3A);
	//OCR3A = 390; 
	//int Count = 0;
	while (Cycles < Flashtime)
 404:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Cycles>
 408:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Cycles+0x1>
 40c:	8c 17       	cp	r24, r28
 40e:	9d 07       	cpc	r25, r29
 410:	cc f3       	brlt	.-14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		
		//Count++;
	}
	//TIMSK3 &= ~(1<<OCIE3A);
	//TCCR3B &= (0<<CS12)|(0<<CS11)|(0<<CS10);
	Set_Time_3(0,0,0);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 ca 01 	call	0x394	; 0x394 <Set_Time_3>
	//TIMSK1 |= (1<<OCIE1A);
	//Cycles = 0;
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <main>:
volatile int Flashall = 0;
int Win_time = 0;

int main(void)
{
	DDRD |= 0xFF;
 428:	8a b1       	in	r24, 0x0a	; 10
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x7F;
 42e:	84 b1       	in	r24, 0x04	; 4
 430:	8f 67       	ori	r24, 0x7F	; 127
 432:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF & ~(1<<button) ;
 434:	8d ef       	ldi	r24, 0xFD	; 253
 436:	87 b9       	out	0x07, r24	; 7
	DDRE |= (1<<test_led);
 438:	68 9a       	sbi	0x0d, 0	; 13
	
	
	PORTC |= (1<<button); //enable pull-up resistor for PB7
 43a:	41 9a       	sbi	0x08, 1	; 8
	
	PORTD |= 0x0; //Turn off leds
 43c:	8b b1       	in	r24, 0x0b	; 11
 43e:	8b b9       	out	0x0b, r24	; 11
	PORTB |= ~(0x7F);
 440:	2f 9a       	sbi	0x05, 7	; 5
	PORTE |= ~(1<<test_led);
 442:	8e b1       	in	r24, 0x0e	; 14
 444:	8e 6f       	ori	r24, 0xFE	; 254
 446:	8e b9       	out	0x0e, r24	; 14

	Timer_setup();
 448:	0e 94 79 00 	call	0xf2	; 0xf2 <Timer_setup>
	
	PCICR |= (1 << PCIE1);
 44c:	e8 e6       	ldi	r30, 0x68	; 104
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	82 60       	ori	r24, 0x02	; 2
 454:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9);
 456:	ec e6       	ldi	r30, 0x6C	; 108
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	80 83       	st	Z, r24
	sei();
 460:	78 94       	sei
	
	
	All_On(5);
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 f7 01 	call	0x3ee	; 0x3ee <All_On>
 46a:	ff cf       	rjmp	.-2      	; 0x46a <main+0x42>

0000046c <Did_you_catch_the_light>:
}

void Did_you_catch_the_light()
{
	//cli();
	if(Flashreg == 0)
 46c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Flashreg>
 470:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Flashreg+0x1>
 474:	89 2b       	or	r24, r25
 476:	c9 f5       	brne	.+114    	; 0x4ea <Did_you_catch_the_light+0x7e>
	{
		PORTE |= (1<<test_led);
 478:	70 9a       	sbi	0x0e, 0	; 14
		All_On(5);
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <All_On>
		Direction ^= 1;
 482:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Direction>
 486:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Direction+0x1>
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	82 27       	eor	r24, r18
 48e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Direction+0x1>
 492:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Direction>
		if(Win_time > 1)
 496:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 49a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	91 05       	cpc	r25, r1
 4a2:	cc f0       	brlt	.+50     	; 0x4d6 <Did_you_catch_the_light+0x6a>
		{
			Delay_Time = Delay_Times(Win_time);//-= 78; //subtract 20ms
 4a4:	0e 94 18 01 	call	0x230	; 0x230 <Delay_Times>
 4a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Delay_Time+0x1>
 4ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Delay_Time>
			//OCR1A = Delay_Times(Win_time); //Delay_Time;
			if(Delay_Time < 1)
 4b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Delay_Time>
 4b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Delay_Time+0x1>
 4b8:	18 16       	cp	r1, r24
 4ba:	19 06       	cpc	r1, r25
 4bc:	64 f0       	brlt	.+24     	; 0x4d6 <Did_you_catch_the_light+0x6a>
			{
				Win_time = 0;
 4be:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 4c2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
				Delay_Time = Delay_Times(Win_time);//390; //reset to 100ms
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 18 01 	call	0x230	; 0x230 <Delay_Times>
 4ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Delay_Time+0x1>
 4d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Delay_Time>
				//OCR1A = Delay_Times(Win_time);//Delay_Time;
			}
		}
		Win_time++;
 4d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 4da:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 4e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 4e8:	13 c0       	rjmp	.+38     	; 0x510 <Did_you_catch_the_light+0xa4>
	}
	else
	{
		PORTD &= 0x0; //turn off all led
 4ea:	8b b1       	in	r24, 0x0b	; 11
 4ec:	1b b8       	out	0x0b, r1	; 11
		PORTB &= 0x0;
 4ee:	85 b1       	in	r24, 0x05	; 5
 4f0:	15 b8       	out	0x05, r1	; 5
		PORTC &= 0x0;
 4f2:	88 b1       	in	r24, 0x08	; 8
 4f4:	18 b8       	out	0x08, r1	; 8
		PORTE |= (1<<test_led);
 4f6:	70 9a       	sbi	0x0e, 0	; 14
		//mydelay(3906); //delay 1 second
		//_delay_ms(1000);
		/*Set_Time_3(390,1,0);
		while(FlashTime < 1);
		Set_Time_3(0,0,0);*/
		Win_time = 0;
 4f8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 4fc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		Delay_Time = Delay_Times(Win_time);//390; //100 ms
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 18 01 	call	0x230	; 0x230 <Delay_Times>
 508:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Delay_Time+0x1>
 50c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Delay_Time>
		
		//OCR1A = Delay_Times(Win_time);
	}
	//sei();
	PORTE &= ~(1<<test_led);
 510:	70 98       	cbi	0x0e, 0	; 14
 512:	08 95       	ret

00000514 <__vector_4>:
	//TCNT1 = Delay;
	//OCR1A = Delay;
}

ISR(PCINT1_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	//PORTE |= (1<<test_led);
	if( (PINC & (1<<button)) == 0 ) //button goes low
 536:	31 9b       	sbis	0x06, 1	; 6
	{
		Did_you_catch_the_light();
 538:	0e 94 36 02 	call	0x46c	; 0x46c <Did_you_catch_the_light>
	}
	//PORTE &= ~(1<<test_led);
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
