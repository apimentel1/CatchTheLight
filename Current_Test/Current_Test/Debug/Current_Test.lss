
Current_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b52  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ba  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042a  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000022fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e0       	ldi	r30, 0x02	; 2
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  da:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <main>:
{
	
	
	
	
	DDRD = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x7F;
  e6:	9f e7       	ldi	r25, 0x7F	; 127
  e8:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xFF;
  ea:	87 b9       	out	0x07, r24	; 7
	
	PORTD |= 0x0; //Turn off leds
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0x0;
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0x0;
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	88 b9       	out	0x08, r24	; 8
	void optimize_power_consumption();
	
    /* Replace with your application code */
    while (1) 
    {
		PORTD |= (1<<Ledtab[0]); //green led
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
}


void Enter_Sleep()
{
	SMCR = (1 << SE); //sleep power save enable, enable sleep, only use before going into sleep mode
 100:	61 e0       	ldi	r22, 0x01	; 1
	void optimize_power_consumption();
	
    /* Replace with your application code */
    while (1) 
    {
		PORTD |= (1<<Ledtab[0]); //green led
 102:	4b b1       	in	r20, 0x0b	; 11
 104:	9c 01       	movw	r18, r24
 106:	00 80       	ld	r0, Z
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x2c>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <main+0x28>
 112:	24 2b       	or	r18, r20
 114:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	33 e2       	ldi	r19, 0x23	; 35
 11a:	44 ef       	ldi	r20, 0xF4	; 244
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x3a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x44>
 126:	00 00       	nop
		_delay_ms(Delay);
		PORTD &= ~(1<<Ledtab[0]); //turn off
 128:	3b b1       	in	r19, 0x0b	; 11
 12a:	ac 01       	movw	r20, r24
 12c:	00 80       	ld	r0, Z
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x52>
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0x4e>
 138:	24 2f       	mov	r18, r20
 13a:	20 95       	com	r18
 13c:	23 23       	and	r18, r19
 13e:	2b b9       	out	0x0b, r18	; 11
		
		PORTD |= (1<<Ledtab[1]); //blue led2
 140:	4b b1       	in	r20, 0x0b	; 11
 142:	9c 01       	movw	r18, r24
 144:	01 80       	ldd	r0, Z+1	; 0x01
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x6a>
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <main+0x66>
 150:	24 2b       	or	r18, r20
 152:	2b b9       	out	0x0b, r18	; 11
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	33 e2       	ldi	r19, 0x23	; 35
 158:	44 ef       	ldi	r20, 0xF4	; 244
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x78>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x82>
 164:	00 00       	nop
		_delay_ms(Delay);
		PORTD &= ~(1<<Ledtab[1]); //turn off
 166:	3b b1       	in	r19, 0x0b	; 11
 168:	ac 01       	movw	r20, r24
 16a:	01 80       	ldd	r0, Z+1	; 0x01
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0x90>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <main+0x8c>
 176:	24 2f       	mov	r18, r20
 178:	20 95       	com	r18
 17a:	23 23       	and	r18, r19
 17c:	2b b9       	out	0x0b, r18	; 11
		
		PORTD |= (1<<Ledtab[2]); //red led3
 17e:	4b b1       	in	r20, 0x0b	; 11
 180:	9c 01       	movw	r18, r24
 182:	02 80       	ldd	r0, Z+2	; 0x02
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0xa8>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0xa4>
 18e:	24 2b       	or	r18, r20
 190:	2b b9       	out	0x0b, r18	; 11
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	33 e2       	ldi	r19, 0x23	; 35
 196:	44 ef       	ldi	r20, 0xF4	; 244
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	40 40       	sbci	r20, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0xb6>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xc0>
 1a2:	00 00       	nop
		_delay_ms(Delay);
		PORTD &= (1<<Ledtab[2]); //led off
 1a4:	4b b1       	in	r20, 0x0b	; 11
 1a6:	9c 01       	movw	r18, r24
 1a8:	02 80       	ldd	r0, Z+2	; 0x02
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0xce>
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <main+0xca>
 1b4:	24 23       	and	r18, r20
 1b6:	2b b9       	out	0x0b, r18	; 11
		
		PORTB |= 0x1F; //all on
 1b8:	25 b1       	in	r18, 0x05	; 5
 1ba:	2f 61       	ori	r18, 0x1F	; 31
 1bc:	25 b9       	out	0x05, r18	; 5
		PORTD |= 0xEF;
 1be:	2b b1       	in	r18, 0x0b	; 11
 1c0:	2f 6e       	ori	r18, 0xEF	; 239
 1c2:	2b b9       	out	0x0b, r18	; 11
		PORTC |= 0x3C;
 1c4:	28 b1       	in	r18, 0x08	; 8
 1c6:	2c 63       	ori	r18, 0x3C	; 60
 1c8:	28 b9       	out	0x08, r18	; 8
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	33 e2       	ldi	r19, 0x23	; 35
 1ce:	44 ef       	ldi	r20, 0xF4	; 244
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	40 40       	sbci	r20, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xee>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xf8>
 1da:	00 00       	nop
		_delay_ms(Delay);
		PORTB &= 0x0;
 1dc:	25 b1       	in	r18, 0x05	; 5
 1de:	15 b8       	out	0x05, r1	; 5
		PORTD &= 0x0; //all off
 1e0:	2b b1       	in	r18, 0x0b	; 11
 1e2:	1b b8       	out	0x0b, r1	; 11
		PORTC &= 0x0;
 1e4:	28 b1       	in	r18, 0x08	; 8
 1e6:	18 b8       	out	0x08, r1	; 8
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	33 e2       	ldi	r19, 0x23	; 35
 1ec:	44 ef       	ldi	r20, 0xF4	; 244
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	40 40       	sbci	r20, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x10c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x116>
 1f8:	00 00       	nop
}


void Enter_Sleep()
{
	SMCR = (1 << SE); //sleep power save enable, enable sleep, only use before going into sleep mode
 1fa:	63 bf       	out	0x33, r22	; 51
 1fc:	82 cf       	rjmp	.-252    	; 0x102 <main+0x20>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
